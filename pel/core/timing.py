"""
Contains a simple interface for timing code.
"""

from time import perf_counter_ns


def time_func(func, *args, **kwargs):
    """
    Time a function call.

    Parameters
    ----------
    func : Callable
        The function to time.
    *args : Any
        The arguments to pass to the function.
    **kwargs : Any
        The keyword arguments to pass to the function.

    Returns
    -------
    Any
        The result of the function call.
    int
        The time taken to execute the function in nanoseconds.
    """
    start = perf_counter_ns()
    result = func(*args, **kwargs)
    end = perf_counter_ns()
    return result, end - start


def time_func_multiple(func, kwarg_generator=None, *args, **kwargs):
    """
    Time a function call multiple times.

    Parameters
    ----------
    func : Callable
        The function to time.
    kwarg_generator : Callable
        A function that generates keyword arguments for the function call.
    *args : Any
        The arguments to pass to the function.
    **kwargs : Any
        The keyword arguments to pass to the function. These will override the keyword arguments generated by `kwarg_generator`.

    Returns
    -------
    list[Any]
        The results of the function calls.
    list[int]
        The times taken to execute the function calls in nanoseconds.
    """
    results = []
    times = []
    for kwargs_single in kwarg_generator():
        kwargs_single.update(kwargs)
        result, time = time_func(func, *args, **kwargs_single)
        results.append(result)
        times.append(time)
    return results, times
